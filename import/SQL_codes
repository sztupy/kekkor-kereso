osmconvert hungary-ways.osm.pbf --drop-author --drop-version --out-osm -o=hunway.osm
osm2pgrouting -f hunway.osm --conf mapconfig_for_pedestrian.xml --dbname gis --username root -W root --clean
osmosis --read-pbf hungary-latest.osm.pbf --tf accept-ways 'highway=*' --used-node  --write-pbf "hungary-ways.osm.pbf"
osmosis --read-pbf hungary-latest.osm.pbf --tf accept-relations 'route=bus' --used-way --used-node  --write-pbf "hungary-busroutes.osm.pbf"
osmosis --read-pbf hungary-latest.osm.pbf --tf accept-nodes 'highway=bus_stop' --write-pbf "hungary-bus-stops.osm.pbf"


alter table ways_vertices_pgr add column x double precision, add column y double precision;


update ways_vertices_pgr set x = ST_X(ST_Transform(the_geom,3035)), y = ST_Y(ST_Transform(the_geom,3035));


create index distance_waypoints ON ways_vertices_pgr USING GIST(geography(the_geom));

alter table buszmegallok add column closest_vertex int;

update buszmegallok set closest_vertex = (select id from ways_vertices_pgr where ST_DWITHIN(buszmegallok.geom, ways_vertices_pgr.the_geom, 0.01) order by ST_DISTANCE(buszmegallok.geom, ways_vertices_pgr.the_geom) ASC LIMIT 1) where closest_vertex is null;



alter table ways add column x1_m double precision, add column x2_m double precision, add column y1_m double precision, add column y2_m double precision;


update ways set x1_m = (select x from ways_vertices_pgr where ways_vertices_pgr.id = source), y1_m = (select y from ways_vertices_pgr where ways_vertices_pgr.id = source), x2_m = (select x from ways_vertices_pgr where ways_vertices_pgr.id = target), y2_m =  (select y from ways_vertices_pgr where ways_vertices_pgr.id = target);



create table busstop_cluster as (select busstops.*, ST_ClusterDBSCAN(geom, eps:=0.002, minpoints:=2) over () as cluster_id FROM busstops);

create table stamp_cluster as (select belyegzok.*, ST_ClusterDBSCAN(geom, eps:=0.01, minpoints:=2) over () as cluster_id FROM belyegzok);

create table busstop_filtered as ((select distinct on (cluster_id) * from busstop_cluster where cluster_id is not null order by cluster_id, id) UNION (select * from busstop_cluster where cluster_id is null));


create table stamp_filtered as (
    (
        select distinct on (cluster_id) * from stamp_cluster where cluster_id is not null
        order by cluster_id, st_distance(geom, (select geom from kekkor)) asc
    )
UNION
    (select * from stamp_cluster where cluster_id is null));


create table result_paths as (select * FROM pgr_aStar('SELECT gid as id, source, target, length_m as cost, length_m as reverse_cost, x1_m as x1, y1_m as y1, x2_m as x2, y2_m as y2 from ways', 'select stamp_filtered.closest_vertex as source, busstop_filtered.closest_vertex as target from busstop_filtered, stamp_filtered WHERE ST_DISTANCE(busstop_filtered.geom, stamp_filtered.geom, true) < 5000', directed => false));

-- create table result_paths as (select * FROM pgr_aStar('SELECT gid as id, source, target, length_m as cost, length_m as reverse_cost, x1_m as x1, y1_m as y1, x2_m as x2, y2_m as y2 from ways', 'select belyegzok.closest_vertex as source, busstops.closest_vertex as target from busstops, belyegzok WHERE ST_DISTANCE(busstops.geom, belyegzok.geom, true) < 5000', directed => false));


create table walking_route as (
    with lines_raw as (
        select
            start_vid,
            end_vid,
            ST_LineMerge( ST_Collect( (SELECT the_geom FROM ways where ways.gid = edge) ORDER BY path_seq) ) AS geom
        FROM result_paths
        WHERE edge != -1
        GROUP BY start_vid, end_vid
    ),
    lines as (
        select
            start_vid,
            end_vid,
            CASE WHEN (select the_geom from ways_vertices_pgr where ways_vertices_pgr.id = start_vid) = st_endpoint(geom)
                THEN ST_reverse(geom)
                ELSE geom
            END AS geom
        from lines_raw
    )
    select
        start_vid,
        end_vid,
        geom,
        st_length(geom) as length,
        st_length(geom, true) as length_m,
        (select id from stamp_filtered order by st_distance(st_startpoint(lines.geom), stamp_filtered.geom) limit 1) as stamp_point,
        (select id from busstop_filtered order by st_distance(st_endpoint(lines.geom), busstop_filtered.geom) limit 1) as bus_point
    from lines
);

create table kekkor_split as
(
    with
        stamp_points as (select st_closestpoint( (select geom from kekkor), geom) as geom, st_linelocatepoint( (select geom from kekkor), geom) as order from stamp_filtered),
        ordered_points as (select st_collect(geom order by "order") as res from stamp_points),
        split_dump as (select (st_dump(st_split(st_snap(geom, ordered_points.res, 0.0001), ordered_points.res))) as dump from kekkor, ordered_points)
    select
        (dump).path[1] as section_id,
        (dump).geom as geom,
        st_length((dump).geom) as length,
        st_length((dump).geom, true) as length_m,
        (select id from stamp_filtered order by st_distance(st_startpoint((dump).geom), geom) limit 1) as start_point,
        (select id from stamp_filtered where id != (select id from stamp_filtered order by st_distance(st_startpoint((dump).geom), geom) limit 1) order by st_distance(st_endpoint((dump).geom), geom) limit 1) as end_point
    from split_dump
);

update kekkor_split set section_id = 308 where section_id = 1;
update kekkor_split set section_id = section_id - 1;
